/* 固定位置   */
.x-layout-anchor{
	position: absolute;
	
	_ruby-align: expression(function(){
		
		if(isSet(this, 'left')){
			this.runtimeStyle.left = this.style.pixelLeft  - styleNumber(this.parentNode, 'paddingLeft');
			if(isSet(this, 'right') && !isSet(this, 'width'))
				this.runtimeStyle.width = Math.max(this.parentNode.offsetWidth - side(this, 'Left') - side(this, 'Right'), 0);
		} else if(isSet(this, 'right')) {
			this.runtimeStyle.left = this.parentNode.offsetWidth - this.offsetWidth - styleNumber(this.parentNode, 'paddingLeft') - styleNumber(this, 'marginLeft') - styleNumber(this, 'marginRight') - styleNumber(this.parentNode, 'borderRightWidth')- styleNumber(this.parentNode, 'borderLeftWidth')  - this.style.pixelRight;
			this.runtimeStyle.right = 'auto';
		}
		
		if(isSet(this, 'top')){
			if(isSet(this, 'bottom') && !isSet(this, 'height'))
				this.runtimeStyle.height = Math.max(this.parentNode.offsetHeight - side(this, 'Top') - side(this, 'Bottom'), 0);
		} else if(isSet(this, 'bottom')) {
			this.runtimeStyle.top = this.parentNode.offsetHeight - this.offsetHeight - styleNumber(this.parentNode, 'paddingTop')  - this.style.pixelBottom;
			this.runtimeStyle.bottom = 'auto';
		}
		
		function isSet(elem, name){
			return elem.style[name] && elem.style[name] != 'auto'
		}
		
		function styleNumber(elem, name){
			return parseFloat(elem.currentStyle[name]) || 0;
		}
		
		function side(elem, name){
			return elem.style['pixel' + name] + styleNumber(elem, 'margin' + name) + styleNumber(elem, 'border' + name + 'Width') + styleNumber(elem, 'padding' + name);
		}
	}.call(this)
	
	);
}
