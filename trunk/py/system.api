<?xml version="1.0" encoding="gb2312"?>
<doc language="Javascript" create="2011/6/15 1:51:30">
  <summary>Py.Core in Javascript</summary>
  <sources>
    <source id="0" path="../../../window/fun/PyDoc/bin/Debug/define.js" />
    <source id="1" path="system.js" author="xuld" license="MIT license" copyright="2009-2011 xuld" />
    <source id="2" path="system/dom/element.js" />
  </sources>
  <members>
    <class name="Object" source="-1">
      <method name="extendIf" attribute="static" id="0">
        <summary>如果目标成员不存在就复制对象的所有属性到其它对象。</summary>
        <remarks>&lt;code&gt;
var a = {v: 3, g: 5}, b = {g: 2};
Object.extendIf(a, b);
trace(a); // {v: 3, g: 5}  b 未覆盖 a 任何成员。
&lt;/code&gt;</remarks>
        <see cref="Object.extend" />
        <returns type="Object">复制后的对象。</returns>
        <param name="dest" type="Object">复制目标。</param>
        <param name="obj" type="Object">要复制的内容。</param>
      </method>
      <method name="extend" attribute="static" id="1">
        <summary>复制对象的所有属性到其它对象。</summary>
        <see cref="Object.extendIf" />
        <example>&lt;code&gt;
var a = {v: 3}, b = {g: 2};
Object.extend(a, b);
trace(a); // {v: 3, g: 2}
&lt;/code&gt;</example>
        <returns type="Object">复制后的对象。</returns>
        <param name="dest" type="Function">复制目标。</param>
        <param name="obj" type="Object">要复制的内容。</param>
      </method>
      <method name="each" attribute="static" id="2">
        <summary>在原有可迭代对象遍历。</summary>
        <example>&lt;code&gt; 
Object.each({a: '1', c: '3'}, function(value, key) {
trace(key + ' : ' + value);
});
// 输出 'a : 1' 'c : 3'
&lt;/code&gt;</example>
        <returns type="Boolean">是否遍历完所传的所有值。</returns>
        <param name="iterable" type="Object">对象，不支持函数。</param>
        <param name="fn" type="Function">执行的函数。参数 value (值), key|index (键), iterable (对象)。</param>
        <param name="bind" type="Object">迭代函数的环境变量。</param>
      </method>
      <method name="update" attribute="static" id="3">
        <summary>更新可迭代对象。</summary>
        <example>Object.update(["aa","aa23"], "length", []); // =&gt; [2, 4];
Object.update(["aa","aa23"], 'charAt', [], 0); // =&gt; ["a", "a"];
Object.update(["aa","aa23"], function(value, key) {return value.charAt(0);}, []); // =&gt; ["a", "a"];</example>
        <returns type="Object">返回的对象。</returns>
        <param name="iterable" type="Undefined">对象。</param>
        <param name="fn" type="String">属性/执行的函数。参数 value。如果函数返回 undefined , 则不更新。</param>
        <param name="dest" type="Undefined" defaultvalue="iterable">更新目标。</param>
        <param name="args" type="Boolean" defaultvalue="">参数/绑定对象/方式。</param>
      </method>
      <method name="isObject" attribute="static" id="4">
        <summary>判断一个变量是否是引用变量。</summary>
        <returns type="Boolean">所有 {} 和 new Object() 对象变量返回 true。</returns>
        <param name="object" type="Object">变量。</param>
        <param name="obj" type="Object" />
      </method>
      <method name="isArray" attribute="static" id="5">
        <summary>判断一个变量是否是数组。</summary>
        <returns type="Boolean">判断是否数组。</returns>
        <param name="object" type="Object">变量。</param>
        <param name="obj" type="Object" />
      </method>
      <method name="isFunction" attribute="static" id="6">
        <summary>判断一个变量是否是函数。</summary>
        <returns type="Boolean">判断是否是函数。</returns>
        <param name="object" type="Object">变量。</param>
        <param name="obj" type="Object" />
      </method>
      <method name="type" attribute="static" id="7">
        <summary>返回一个变量的类型的字符串形式。</summary>
        <returns type="String">所有可以返回的字符串：  string  number   boolean   undefined	null	array	function   element  class   date   regexp object。</returns>
        <param name="obj" type="Object">变量。</param>
      </method>
      <method name="clone" attribute="static" id="8">
        <summary>深拷贝一个对象本身, 不深复制函数。</summary>
        <example>&lt;code&gt;
var obj1 = {a: 0, b: 1};
var obj2 = Object.clone(obj1);
obj1.a = 3;
trace(obj1.a);  // trace 3
trace(obj2.a);  // trace 0
&lt;/code&gt;</example>
        <returns type="Object">复制的对象。</returns>
        <param name="obj" type="Object">对象。</param>
      </method>
      <method name="set" attribute="static" id="9">
        <summary>将一个对象解析成一个类的属性。</summary>
        <returns type="void" />
        <param name="obj" type="Object">类实例。</param>
        <param name="config" type="Object">参数。</param>
      </method>
      <method name="addCallback" attribute="static" id="10">
        <summary>添加一个对象的成员函数调用结束后的回调函数。</summary>
        <example>Object.addCallback(window, "onload",trace.empty);</example>
        <returns type="Object">对象。</returns>
        <param name="obj" type="Object">对象。</param>
        <param name="name" type="String">成员函数名。</param>
        <param name="fn" type="Object">对象。</param>
      </method>
    </class>
    <class name="Function" source="-1">
      <property type="Function" name="empty" attribute="static">
        <summary>空函数。</summary>
        <remarks>Function.empty返回空函数的引用。</remarks>
      </property>
      <property type="Function" name="returnTrue" attribute="static">
        <summary>一个返回 true 的函数。</summary>
      </property>
      <property type="Function" name="returnFalse" attribute="static">
        <summary>一个返回 false 的函数。</summary>
      </property>
      <method name="bind" attribute="static">
        <summary>绑定函数作用域。</summary>
        <returns type="Function" />
        <param name="fn" type="Function">函数。</param>
        <param name="bind" type="Object">位置。</param>
      </method>
      <dynatic name="from">
        <method name="from" attribute="static">
          <summary>返回自身的函数。</summary>
          <returns type="void" />
        </method>
        <members>
          <link name="extendIf" target="0" />
          <link name="extend" target="1" />
          <link name="each" target="2" />
          <link name="update" target="3" />
          <link name="isObject" target="4" />
          <link name="isArray" target="5" />
          <link name="isFunction" target="6" />
          <link name="type" target="7" />
          <link name="clone" target="8" />
          <link name="set" target="9" />
          <link name="addCallback" target="10" />
        </members>
      </dynatic>
    </class>
    <class name="RegExp" source="-1">
      <field type="String" name="xType">
        <summary>xType。</summary>
      </field>
    </class>
    <class name="Array" source="-1">
      <method name="create" attribute="static">
        <summary>在原有可迭代对象生成一个数组。</summary>
        <returns type="Array">复制得到的数组。</returns>
        <param name="iterable" type="Object">可迭代的实例。</param>
        <param name="start" type="Number" defaultvalue="0">开始的位置。</param>
      </method>
      <method name="plain" attribute="static">
        <summary>把传入的值连接为新的数组。如果元素本身是数组，则合并。此函数会过滤以存在的值。</summary>
        <returns type="Array">新数组。</returns>
        <param name="..." type="Function">数据成员。</param>
        <param name="" type="Undefined" />
      </method>
      <method name="forEach">
        <summary>对数组运行一个函数。</summary>
        <returns type="void" />
        <param name="fn" type="Function">函数.参数 value, index</param>
        <param name="bind" type="Object">对象。</param>
      </method>
      <method name="indexOf">
        <summary>返回数组某个值的第一个位置。值没有,则为-1 。</summary>
        <remarks>现在大多数浏览器已含此函数.除了 IE8-  。</remarks>
        <returns type="">Number 位置，找不到返回 -1 。</returns>
        <param name="item" type="Object">成员。</param>
        <param name="start" type="Number">开始查找的位置。</param>
      </method>
      <method name="contains">
        <summary>返回数组是否包含一个值。</summary>
        <returns type="Boolean">存在返回 true 。</returns>
        <param name="item" type="Object">成员。</param>
      </method>
      <method name="each">
        <summary>对数组运行一个函数。</summary>
        <returns type="Boolean">有无执行完。</returns>
        <param name="fn" type="Function">函数.参数 value, index</param>
        <param name="bind" type="Object">对象。</param>
      </method>
      <method name="filter">
        <summary>对数组每个元素通过一个函数过滤。返回所有符合要求的元素的数组。</summary>
        <returns type="Array">this</returns>
        <param name="fn" type="Object">函数。参数 value, index, this。</param>
        <param name="bind" type="Object">绑定的对象。</param>
      </method>
      <method name="select">
        <summary>对数组每个元素查找一个函数返回true的项。 或按属性返回数组一个元素。</summary>
        <remarks>&lt;code&gt;
var a = ["", "aaa", "zzz", "qqq"];
a.select("length", 0); //  返回"";
a = [{q: "1"}, {q: "3"}];
a.select("q", "3");	//  返回{q: "3"};
&lt;/code&gt;</remarks>
        <returns type="Array">新数组。</returns>
        <param name="name" type="Function/String">函数。参数 value, index。 /数组成员的字段。</param>
        <param name="value" type="Object">值。</param>
      </method>
      <method name="include">
        <summary>包含一个元素。元素存在直接返回。</summary>
        <returns type="Boolean">是否包含元素。</returns>
        <param name="value" type="Object">值。</param>
      </method>
      <method name="insert">
        <summary>在指定位置插入项。</summary>
        <returns type="Object" />
        <param name="index" type="Number">插入的位置。</param>
        <param name="value" type="Object">插入的内容。</param>
      </method>
      <method name="invoke">
        <summary>对数组成员遍历执行。</summary>
        <returns type="Array">结果。</returns>
        <param name="fn" type="Array/ElementList" />
        <param name="args" type="Function" />
        <param name="" type="Array" />
      </method>
      <method name="unique">
        <summary>删除数组中重复元素。</summary>
        <returns type="Array">结果。</returns>
      </method>
      <method name="remove">
        <summary>删除元素, 参数为元素的内容。</summary>
        <returns type="Number">删除的值的位置。</returns>
        <param name="value" type="Object">值。</param>
      </method>
      <field type="String" name="xType">
        <summary>xType。</summary>
      </field>
    </class>
    <class name="Date" source="-1">
      <method name="now" attribute="static">
        <summary>获取当前时间。</summary>
        <returns type="Number">当前的时间点。</returns>
      </method>
      <field type="String" name="xType">
        <summary>xType。</summary>
      </field>
    </class>
    <dynatic name="document" source="-1">
      <field type="Object" name="document" source="-1" />
      <members>
        <method name="ready">
          <summary>页面加载时执行。</summary>
          <returns type="void" />
          <param name="fn" type="Functon/undefined">执行的函数。</param>
        </method>
        <method name="addEventListener">
          <summary>绑定一个监听器。</summary>
          <returns type="void" />
          <param name="type" type="String">类型。</param>
          <param name="fn" type="Function">函数。</param>
        </method>
        <method name="removeEventListener">
          <summary>移除一个监听器。</summary>
          <returns type="void" />
          <param name="type" type="String">类型。</param>
          <param name="fn" type="Function">函数。</param>
        </method>
        <method name="getDom">
          <summary>获取节点本身。</summary>
          <returns type="Element" />
        </method>
      </members>
    </dynatic>
    <dynatic name="trace">
      <method name="trace">
        <summary>调试输出。</summary>
        <returns type="void" />
        <param name="obj" type="String">值。</param>
        <param name="args" type="Object">格式化的字符串。</param>
      </method>
      <members>
        <method name="error">
          <summary>输出一个错误信息。</summary>
          <returns type="void" />
          <param name="msg" type="String">内容。</param>
        </method>
        <method name="inspect">
          <summary>获取对象的所有成员的字符串形式。</summary>
          <returns type="">String 成员。</returns>
          <param name="obj" type="Undefined">要输出的内容。</param>
          <param name="deep" type="Number/undefined">递归的层数。</param>
        </method>
        <method name="alert">
          <summary>输出方式。</summary>
          <returns type="void" />
          <param name="message" type="String">信息。</param>
        </method>
        <method name="dir">
          <summary>遍历对象每个元素。</summary>
          <returns type="void" />
          <param name="obj" type="Object">对象。</param>
        </method>
        <method name="api">
          <summary>输出类的信息。</summary>
          <returns type="void" />
          <param name="成员" type="Object">。</param>
          <param name="obj" type="Object" />
        </method>
        <method name="from">
          <summary>得到输出指定内容的函数。</summary>
          <returns type="Function" />
          <param name="msg" type="" />
        </method>
        <method name="log">
          <summary>输出信息。</summary>
          <returns type="void" />
          <param name="..." type="Object">内容。</param>
        </method>
        <method name="warn">
          <summary>输出一个警告信息。</summary>
          <returns type="void" />
          <param name="msg" type="Object">内容。</param>
        </method>
        <method name="info">
          <summary>输出一个信息。</summary>
          <returns type="void" />
          <param name="msg" type="Object">内容。</param>
        </method>
        <method name="ifDebug">
          <summary>如果是调试模式就运行。</summary>
          <returns type="">String 返回运行的错误。如无错, 返回空字符。</returns>
          <param name="f" type="Function">函数。</param>
        </method>
        <method name="clear">
          <summary>清除调试信息。  (没有控制台时，不起任何作用)</summary>
          <returns type="void" />
        </method>
        <method name="empty">
          <summary>空函数，用于证明函数已经执行过。</summary>
          <returns type="void" />
          <param name="msg" type="" />
        </method>
        <method name="ifNot">
          <summary>如果false则输出。</summary>
          <returns type="String">msg  输出的内容。</returns>
          <param name="condition" type="Boolean">字段。</param>
          <param name="msg" type="" />
        </method>
        <method name="runTime">
          <summary>测试某个函数运行一定次数的时间。</summary>
          <returns type="Number">运行的时间 。</returns>
          <param name="fn" type="Function">函数。</param>
          <param name="args" type="Array">函数参数。</param>
          <param name="times" type="Number" defaultvalue="1000">运行次数。</param>
        </method>
        <method name="test">
          <summary>输出一个函数执行指定次使用的时间。</summary>
          <returns type="void" />
          <param name="fn" type="Function">函数。</param>
          <param name="times" type="Number" defaultvalue="1000">运行次数。</param>
        </method>
      </members>
    </dynatic>
    <dynatic name="assert">
      <method name="assert">
        <summary>确认一个值正确。</summary>
        <example>&lt;code&gt;
assert(true, "{value} 错误。", value
&lt;/code&gt;</example>
        <returns type="Boolean">返回 bValue 。</returns>
        <param name="bValue" type="Object/undefined">值。</param>
        <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
        <param name="" type="Object/undefined" />
        <param name="" type="Object" />
        <param name="" type="Object" />
      </method>
      <members>
        <method name="notNull">
          <summary>确认一个值非空。</summary>
          <returns type="Boolean">返回 assert 是否成功 。</returns>
          <param name="value" type="Object">值。</param>
          <param name="argsName" type="String">变量的名字字符串。</param>
          <param name="msg" type="" />
        </method>
        <method name="isFunction">
          <summary>确认一个值为函数变量。</summary>
          <example>&lt;code&gt;
assert.isFunction(a, "a ~");
&lt;/code&gt;</example>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Function">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="" type="Function" />
        </method>
        <method name="isObject">
          <summary>确认一个值为函数变量。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Object">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="isNumber">
          <summary>确认一个值为数字。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Object">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="isArray">
          <summary>确认一个值为数组。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Object">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
        </method>
        <method name="isNode">
          <summary>确认一个值为节点。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Element">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="isElement">
          <summary>确认一个值为节点。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Element">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="isString">
          <summary>确认一个值是字符串。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Object">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="isDate">
          <summary>确认一个值是日期。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Object">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="isRegExp">
          <summary>确认一个值是正则表达式。</summary>
          <returns type="Boolean">返回 bValue 。</returns>
          <param name="bValue" type="Object">值。</param>
          <param name="msg" type="String" defaultvalue="&quot;断言失败&quot;">错误后的提示。</param>
          <param name="value" type="" />
        </method>
        <method name="between">
          <summary>确认一个值在 min ， max 间。</summary>
          <returns type="Boolean">返回 assert 是否成功 。</returns>
          <param name="value" type="Number">判断的值。</param>
          <param name="min" type="Number">最小值。</param>
          <param name="max" type="Number">最大值。</param>
          <param name="argsName" type="String">变量的米各庄。</param>
          <param name="msg" type="" />
        </method>
        <method name="instanceOf">
          <summary>确认一个值属于一个类型。</summary>
          <returns type="Boolean">返回 assert 是否成功 。</returns>
          <param name="v" type="Object">值。</param>
          <param name="types" type="String/Array">类型/表示类型的参数数组。</param>
          <param name="message" type="String">错误的提示信息。</param>
          <param name="msg" type="" />
        </method>
        <method name="notEmpty">
          <summary>确认一个值非空。</summary>
          <returns type="Boolean">返回 assert 是否成功 。</returns>
          <param name="value" type="Object">值。</param>
          <param name="argsName" type="String">变量的参数名。</param>
          <param name="msg" type="" />
        </method>
      </members>
    </dynatic>
    <namespace name="Py" source="2">
      <summary>配置。可省略。</summary>
      <field type="String" name="rootPath">
        <summary>PyJs 安装的根目录, 可以为相对目录。</summary>
      </field>
      <field type="Boolean" name="stackTrace">
        <summary>是否输出 assert 来源。</summary>
      </field>
      <field type="String" name="defaultNamespace">
        <summary>默认的全局名字空间。</summary>
      </field>
      <field type="String" name="theme">
        <summary>主题。</summary>
      </field>
      <class name="Class">
        <summary>创建一个类。</summary>
        <method name="implement">
          <summary>扩展当前类的动态方法。</summary>
          <see cref="Class.implement" />
          <returns type="Class">继承的子类。</returns>
          <param name="obj" type="Object">成员。</param>
        </method>
        <method name="implementIf">
          <summary>如果不存在成员, 扩展当前类的动态方法。</summary>
          <see cref="Class.implement" />
          <returns type="Class">继承的子类。</returns>
          <param name="obj" type="Object">成员。</param>
        </method>
        <method name="addEvents">
          <summary>为当前类添加事件。</summary>
          <returns type="">this</returns>
          <param name="evens" type="String">所有事件。 如字符串用“,”分开的事件。 事件对象，包含 {add, trigger, remove} 方法。</param>
          <param name="events" type="" />
        </method>
        <method name="extend">
          <summary>完成动态类的自身继承。</summary>
          <returns type="Class">继承的子类。</returns>
          <param name="methods" type="Object">成员。</param>
          <param name="quick" type="Boolean" defaultvalue="true">如果 true 那么这个类只能有1个实例，且不能复制 。</param>
          <param name="members" type="" />
        </method>
      </class>
      <dynatic name="Events">
        <property type="Object" name="Events">
          <summary>管理所有事件类型的工具。</summary>
        </property>
        <members>
          <field type="Object" name="$default">
            <summary>管理默认的类事件。</summary>
          </field>
          <dynatic name="element">
            <field type="Object" name="element">
              <summary>管理元素的事件。</summary>
            </field>
            <members>
              <dynatic name="$default">
                <field type="Object" name="$default">
                  <summary>默认事件。</summary>
                </field>
                <members>
                  <method name="setup">
                    <summary>事件初始化。</summary>
                    <returns type="Function">启用当前事件的函数。</returns>
                  </method>
                  <method name="createEventArgs">
                    <summary>创建当前事件可用的参数。</summary>
                    <returns type="EventArgs">e 事件参数。</returns>
                    <param name="e" type="EventArgs">事件参数。</param>
                    <param name="target" type="Object">事件目标。</param>
                  </method>
                  <method name="trigger">
                    <summary>事件触发后对参数进行处理。</summary>
                    <returns type="void" />
                    <param name="e" type="EventArgs">事件参数。</param>
                  </method>
                  <method name="add">
                    <summary>添加绑定事件。</summary>
                    <returns type="void" />
                    <param name="obj" type="Object">对象。</param>
                    <param name="type" type="String">类型。</param>
                    <param name="fn" type="Function">函数。</param>
                  </method>
                  <method name="remove">
                    <summary>删除事件。</summary>
                    <returns type="void" />
                    <param name="obj" type="Object">对象。</param>
                    <param name="type" type="String">类型。</param>
                    <param name="fn" type="Function">函数。</param>
                  </method>
                </members>
              </dynatic>
            </members>
          </dynatic>
        </members>
      </dynatic>
      <class name="Element">
        <summary>元素。</summary>
      </class>
      <method name="$">
        <summary>根据一个 id 或 对象获取节点。</summary>
        <returns type="Object" />
        <param name="id" type="String/Element">对象的 id 或对象。</param>
      </method>
      <method name="data" attribute="static">
        <summary>获取属于一个元素的数据。</summary>
        <returns type="Object">值。</returns>
        <param name="obj" type="Object">元素。</param>
        <param name="type" type="String">类型。</param>
      </method>
      <method name="dataIf" attribute="static">
        <summary>如果存在，获取属于一个元素的数据。</summary>
        <returns type="Object">值。</returns>
        <param name="obj" type="Object">元素。</param>
        <param name="type" type="String">类型。</param>
      </method>
      <method name="setData">
        <summary>设置属于一个元素的数据。</summary>
        <returns type="void" />
        <param name="obj" type="Object">元素。</param>
        <param name="type" type="String">类型。</param>
        <param name="data" type="mixed">内容。</param>
      </method>
      <method name="cloneData">
        <summary>复制一个对象的数据到另一个对象。</summary>
        <returns type="void" />
        <param name="src" type="Object" />
        <param name="dest" type="Object" />
      </method>
      <field type="Array" name="namespaces">
        <summary>全部已载入的名字空间。</summary>
      </field>
      <method name="loadText">
        <summary>同步载入文本。</summary>
        <see cref="Py.loadJs, Py.using" />
        <returns type="String">载入的值。</returns>
        <param name="uri" type="String">地址。</param>
        <param name="callback" type="Function">对返回值的处理函数。</param>
      </method>
      <method name="eval">
        <summary>全局运行一个函数。</summary>
        <returns type="Object">执行返回值。</returns>
        <param name="statement" type="String">语句。</param>
      </method>
      <interface name="IEvent">
        <summary>表示一个事件接口。</summary>
        <method name="on" attribute="static">
          <summary>增加一个监听者。</summary>
          <returns type="">Object this</returns>
          <param name="type" type="String">监听名字。</param>
          <param name="fn" type="Function">调用函数。</param>
        </method>
        <method name="one" attribute="static">
          <summary>增加一个只执行一次的监听者。</summary>
          <returns type="">Object this</returns>
          <param name="type" type="String">监听名字。</param>
          <param name="fn" type="Function">调用函数。</param>
        </method>
        <method name="un" attribute="static">
          <summary>删除一个监听器。</summary>
          <returns type="">Object this</returns>
          <param name="type" type="String" defaultvalue="">监听名字。</param>
          <param name="fn" type="Function/undefined">回调器。</param>
        </method>
        <method name="trigger" attribute="static">
          <summary>触发一个监听器。</summary>
          <returns type="">Object this</returns>
          <param name="type" type="String">监听名字。</param>
          <param name="e" type="Object/undefined">事件参数。</param>
        </method>
      </interface>
      <class name="Object">
        <summary>所有类的基类。</summary>
        <method name="baseCall">
          <summary>调用父类的成员变量。</summary>
          <returns type="Object">父类返回。</returns>
          <param name="me" type="Class">当前类。</param>
          <param name="args" type="Class">调用的参数数组。</param>
          <param name="name" type="String">属性名。</param>
        </method>
        <method name="base">
          <summary>调用父类的构造函数。</summary>
          <returns type="Object">父类返回。</returns>
        </method>
        <method name="memberwiseClone">
          <summary>创建当前 Object 的浅表副本。</summary>
          <returns type="Object">当前变量的副本。</returns>
        </method>
      </class>
      <method name="using">
        <summary>使用一个名空间。</summary>
        <returns type="void" />
        <param name="name" type="String">名字空间。</param>
      </method>
      <method name="namespace">
        <summary>定义名字空间。</summary>
        <returns type="void" />
        <param name="name" type="String">名字空间。</param>
        <param name="obj" type="Object/Boolean">值。</param>
        <param name="value" type="Object">如果 obj 为 true， value 指示复制的成员。</param>
      </method>
      <method name="imports">
        <summary>导入一个名字空间的资源。</summary>
        <returns type="void" />
        <param name="resource" type="String">资源地址。</param>
        <param name="theme" type="Array" defaultvalue="">主题。</param>
      </method>
      <method name="addEventListener">
        <summary>绑定一个监听器。</summary>
        <seealso cref="Py.removeListener" />
        <returns type="void" />
        <param name="elem" type="Element">元素。</param>
        <param name="type" type="String">类型。</param>
        <param name="fn" type="Function">函数。</param>
      </method>
      <method name="removeEventListener">
        <summary>移除一个监听器。</summary>
        <seealso cref="Py.addListener" />
        <returns type="void" />
        <param name="elem" type="Element">元素。</param>
        <param name="type" type="String">类型。</param>
        <param name="fn" type="Function">函数。</param>
      </method>
      <method name="defineDomEvents">
        <summary>定义事件。</summary>
        <returns type="Function">Py.defineDomEvents</returns>
        <param name="事件名" type="String">。</param>
        <param name="trigger" type="Function">触发器。</param>
        <param name="events" type="" />
        <param name="baseEvent" type="" />
        <param name="add" type="" />
        <param name="remove" type="" />
        <param name="createEventArgs" type="" />
      </method>
      <method name="Native">
        <summary>由存在的类修改创建类。即为类添加一个 implement 和 implementIf 成员。</summary>
        <remarks>如果引入 System.Core.Native
Native和Class一样，生成一个类，但Native是在原有对象或类（包括JavaScript内置对象）上转成类。见示例。
&lt;code&gt;
Py.Native(Array); //同样， new 可省略，将Array本地类化。
var myArray = Array.extend({	//既然是类，拥有继承方法。这时  myArray 是一个继承自原生  Array  的类，拥有 Array 类的原有动态成员。
size : function() {return this.length;}
});
var arr = new myArray();
trace(arr.length);   // 输出 0。
&lt;/code&gt;</remarks>
        <seealso cref="Py.Class" />
        <returns type="Class">生成的类。</returns>
        <param name="nativeClass" type="Function/Class">将创建的类。</param>
      </method>
      <method name="setupWindow">
        <summary>将窗口对象本地化。</summary>
        <returns type="void" />
        <param name="w" type="Window">窗口。</param>
      </method>
      <field type="Number" name="id">
        <summary>id种子 。</summary>
      </field>
      <class name="EventArgs">
        <summary>表示事件的参数。</summary>
        <constructor name="constructor">
          <summary>构造函数。</summary>
          <returns type="void" />
          <param name="target" type="Object" />
          <param name="target" type="Object" />
        </constructor>
        <method name="stopPropagation">
          <summary>阻止冒泡。</summary>
          <returns type="void" />
        </method>
        <method name="preventDefault">
          <summary>停止默认。</summary>
          <returns type="void" />
        </method>
      </class>
      <namespace name="Drawing" source="2">
        <class name="Point" source="2">
          <method name="set" source="2">
            <summary>设置当前点位置。</summary>
            <returns type="Point">this</returns>
            <param name="x" type="Number">X 坐标。</param>
            <param name="y" type="Number">Y 坐标。</param>
          </method>
          <constructor name="constructor" source="2">
            <summary>初始化 Point 的实例。</summary>
            <returns type="void" />
            <param name="x" type="Number">X 坐标。</param>
            <param name="y" type="Number">Y 坐标。</param>
            <param name="x" type="Number">X 坐标。</param>
            <param name="y" type="Number">Y 坐标。</param>
          </constructor>
          <method name="add" source="2">
            <summary>将 (x, y) 增值。</summary>
            <returns type="Point">this</returns>
            <param name="value" type="Number">值。</param>
            <param name="x" type="" />
            <param name="y" type="" />
          </method>
          <method name="clone" source="2">
            <summary>复制当前对象。</summary>
            <returns type="Point">坐标。</returns>
          </method>
          <method name="minus" source="2">
            <summary>将一个点坐标减到当前值。</summary>
            <returns type="Point">this</returns>
            <param name="p" type="Point">值。</param>
          </method>
        </class>
      </namespace>
    </namespace>
    <class name="Element">
      <method name="parse" attribute="static" source="2">
        <summary>转换一个HTML字符串到节点。</summary>
        <returns type="Element">元素。</returns>
        <param name="html" type="String/Element">字符。</param>
        <param name="context" type="Document">内容。</param>
        <param name="cachable" type="Boolean" defaultvalue="true">是否缓存。</param>
      </method>
      <method name="implement" attribute="static" source="2">
        <summary>将一个成员附加到 Element 对象和相关类。</summary>
        <remarks>对 Element 扩展，内部对 Element ElementList document Control 皆扩展。
这是由于不同的函数需用不同的方法扩展，必须指明扩展类型。
所谓的扩展，即一个类含需要的函数。
DOM 方法 有 以下种
1  getText - 返回结果  
2  setText - 返回 this
3  getElementById - 返回 DOM
4  getElementsByTagName - 返回  DOM 数组
5  appendChild  - 参数 DOM
对 Element ，
如果 copyIf 是 false 或不存在复制。
对 ElementList ，按 listType，
1, 其它 - 执行结果是数据，返回结果数组。 (默认)
2 - 执行结果返回 this， 返回 this 。
3 - 执行结果是DOM，返回 ElementList 包装。
4 - 执行结果是DOM数组，返回 ElementList 包装。 
5 - 如果每个返回值都是 true， 则返回 true， 否则返回 false。
对 document ， 
如果不存在则复制。
参数 copyIf 仅内部使用。</remarks>
        <returns type="Element">this</returns>
        <param name="obj" type="Object">要附加的对象。</param>
        <param name="listType" type="Number" defaultvalue="1">说明如何复制到 ElementList 实例。</param>
        <param name="copyIf" type="" />
      </method>
      <method name="implementIf" attribute="static" source="2">
        <summary>若不存在，则将一个对象附加到 Element 对象。</summary>
        <returns type="Element">this</returns>
        <param name="obj" type="Object">要附加的对象。</param>
        <param name="listType" type="Number">说明如何复制到 ElementList 实例。</param>
        <param name="docType" type="Number">说明如何复制到 Document 实例。</param>
      </method>
      <method name="getDocument" attribute="static" source="2">
        <summary>获取一个元素的文档。</summary>
        <returns type="Document">当前节点所在文档。</returns>
        <param name="elem" type="Element">元素。</param>
      </method>
      <method name="getStyle" access="private" attribute="static" source="2">
        <summary>获取元素的计算样式。</summary>
        <returns type="String">样式。</returns>
        <param name="dom" type="Object">节点。</param>
        <param name="name" type="String">名字。</param>
      </method>
      <method name="styleString" attribute="static" source="2">
        <summary>读取样式字符串。</summary>
        <returns type="String">字符串。</returns>
        <param name="elem" type="Element">元素。</param>
        <param name="name" type="String">属性名。</param>
      </method>
      <method name="styleNumber" attribute="static" source="2">
        <summary>读取样式数字。</summary>
        <returns type="String">字符串。</returns>
        <param name="elem" type="Element">元素。</param>
        <param name="name" type="String">属性名。</param>
      </method>
      <method name="getSize" access="private" attribute="static" source="2">
        <summary>将 offsetWidth 转为 style.width。</summary>
        <returns type="Number">转换后的大小。</returns>
        <param name="elem" type="Element">元素。</param>
        <param name="width" type="Number">输入。</param>
      </method>
      <property type="Object" name="attributes" access="private" attribute="static" source="2">
        <summary>特殊属性集合。</summary>
      </property>
      <field type="Object" name="styleMaps" attribute="static" source="2">
        <summary>样式表。</summary>
      </field>
      <property type="Object" name="specialAttr" access="private" attribute="static" source="2">
        <summary>特殊属性。</summary>
      </property>
      <property type="Number" name="zIndex" access="private" attribute="static" source="2">
        <summary>默认最大的 z-index 。</summary>
      </property>
      <method name="isHidden" attribute="static" source="2">
        <summary>判断一个节点是否隐藏。</summary>
        <returns type="Boolean">隐藏返回 true 。</returns>
        <param name="elem" type="Element">元素。</param>
      </method>
      <method name="setMovable" attribute="static" source="2">
        <summary>设置一个元素可拖动。</summary>
        <returns type="void" />
        <param name="elem" type="Element">要设置的节点。</param>
      </method>
      <method name="checkPosition" attribute="static" source="2">
        <summary>检查元素的 position 是否和指定的一致。</summary>
        <returns type="Boolean">一致，返回 true 。</returns>
        <param name="elem" type="Element">元素。</param>
        <param name="position" type="String">方式。</param>
      </method>
      <method name="getXY" access="private" attribute="static" source="2">
        <summary>根据 x, y 获取 {x: x y: y} 对象</summary>
        <returns type="void" />
        <param name="x" type="Number/Point" />
        <param name="y" type="Number" />
      </method>
      <field type="String" name="xType">
        <summary>xType</summary>
      </field>
      <method name="getDom">
        <summary>获取节点本身。</summary>
        <returns type="Element" />
      </method>
      <method name="addEventListener">
        <summary>绑定一个监听器。</summary>
        <returns type="void" />
        <param name="type" type="String">类型。</param>
        <param name="fn" type="Function">函数。</param>
      </method>
      <method name="removeEventListener">
        <summary>移除一个监听着。</summary>
        <returns type="void" />
        <param name="type" type="String">类型。</param>
        <param name="fn" type="Function">函数。</param>
      </method>
      <event type="" name="ready">
        <summary>文档初始化事件。</summary>
      </event>
      <method name="getStyle" source="2">
        <summary>获取节点样式。</summary>
        <returns type="String">样式。</returns>
        <param name="key" type="String">键。</param>
        <param name="value" type="String">值。</param>
        <param name="name" type="" />
      </method>
      <method name="getAttr" source="2">
        <summary>获取一个节点属性。</summary>
        <returns type="String">属性。</returns>
        <param name="name" type="String">名字。</param>
        <param name="elem" type="Element" />
      </method>
      <method name="hasClass" source="2">
        <summary>检查是否含指定类名。</summary>
        <returns type="Boolean">如果存在返回 true。</returns>
        <param name="className" type="String" />
        <param name="elem" type="Element" />
      </method>
      <method name="getText" source="2">
        <summary>获取值。</summary>
        <returns type="Object/String">值。对普通节点返回 text 属性。</returns>
      </method>
      <method name="getHtml" source="2">
        <summary>获取值。</summary>
        <returns type="String">值。</returns>
      </method>
      <method name="getOpacity" source="2">
        <summary>获取透明度。</summary>
        <returns type="Number">透明度。 0 - 1 范围。</returns>
      </method>
      <method name="setOpacity" source="2">
        <summary>设置连接的透明度。</summary>
        <returns type="Element">this</returns>
        <param name="value" type="Number">透明度， 0 - 1 。</param>
      </method>
      <method name="setStyle" source="2">
        <summary>设置内容样式。</summary>
        <returns type="Element">this</returns>
        <param name="name" type="String/Object">键。</param>
        <param name="value" type="Object">值。</param>
      </method>
      <method name="setAttr" source="2">
        <summary>设置节点属性。</summary>
        <returns type="Element">this</returns>
        <param name="name" type="String">名字。</param>
        <param name="value" type="String">值。</param>
      </method>
      <method name="set" source="2">
        <summary>快速设置节点全部属性和样式。</summary>
        <returns type="Element">this</returns>
        <param name="name" type="Object">名字。</param>
        <param name="value" type="Object" defaultvalue="">值。</param>
      </method>
      <method name="addClass" source="2">
        <summary>增加类名。</summary>
        <returns type="Element">this</returns>
        <param name="className" type="String">类名。</param>
      </method>
      <method name="removeClass" source="2">
        <summary>删除类名。</summary>
        <returns type="Element">this</returns>
        <param name="className" type="String">类名。</param>
      </method>
      <method name="toggleClass" source="2">
        <summary>切换类名。</summary>
        <returns type="Element">this</returns>
        <param name="className" type="String">类名。</param>
        <param name="toggle" type="" />
      </method>
      <method name="setText" source="2">
        <summary>设置值。</summary>
        <returns type="Element">this</returns>
        <param name="值" type="String/Boolean">。</param>
        <param name="value" type="" />
      </method>
      <method name="setHtml" source="2">
        <summary>设置 HTML 。</summary>
        <returns type="Element">this</returns>
        <param name="value" type="String">值。</param>
      </method>
      <method name="show" source="2">
        <summary>显示当前元素。</summary>
        <returns type="Element">this</returns>
        <param name="duration" type="Number" defaultvalue="500">时间。</param>
        <param name="callBack" type="Function" defaultvalue="">回调。</param>
        <param name="type" type="String" defaultvalue="">方式。</param>
      </method>
      <method name="hide" source="2">
        <summary>隐藏当前元素。</summary>
        <returns type="Element">this</returns>
        <param name="duration" type="Number" defaultvalue="500">时间。</param>
        <param name="callBack" type="Function" defaultvalue="">回调。</param>
        <param name="type" type="String" defaultvalue="">方式。</param>
      </method>
      <method name="setUnselectable" source="2">
        <summary>设置元素不可选。</summary>
        <returns type="">this</returns>
        <param name="value" type="Boolean">是否可选。</param>
      </method>
      <method name="bringToFront" source="2">
        <summary>将元素引到最前。</summary>
        <returns type="">this</returns>
        <param name="elem" type="Element" defaultvalue="">参考元素。</param>
      </method>
      <method name="toggle" source="2">
        <summary>切换显示当前元素。</summary>
        <returns type="Element">this</returns>
        <param name="duration" type="Number" defaultvalue="500">时间。</param>
        <param name="callBack" type="Function" defaultvalue="">回调。</param>
        <param name="type" type="String" defaultvalue="">方式。</param>
        <param name="flag" type="" />
      </method>
      <method name="animate" source="2">
        <summary>变化到某值。</summary>
        <returns type="">this</returns>
        <param name="value" type="String">变化的值。可以为 height opacity width all size position left top right bottom。</param>
        <param name="callBack" type="Function" defaultvalue="">回调。</param>
        <param name="duration" type="Number" defaultvalue="500">时间。</param>
        <param name="type" type="String" defaultvalue="">类型。</param>
      </method>
      <method name="getWindowScroll" source="2">
        <summary>获取滚动条已滚动的大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getScrollSize" source="2">
        <summary>获取滚动区域大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getSize" source="2">
        <summary>获取元素可视区域大小。包括 margin 大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getOffset" source="2">
        <summary>获取元素的相对位置。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getWidth" source="2">
        <summary>获取元素自身大小（不带滚动条）。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getScroll" source="2">
        <summary>获取滚动条已滚动的大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getBound" source="2">
        <summary>获取元素的上下左右大小。</summary>
        <returns type="Rectange">大小。</returns>
      </method>
      <method name="getPosition" source="2">
        <summary>获取距父元素的偏差。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getOffsets" source="2">
        <summary>获取包括滚动位置的位置。</summary>
        <returns type="Point">位置。</returns>
        <param name="relative" type="Element/String/Boolean">相对的节点。</param>
      </method>
      <method name="getOffsetParent" source="2">
        <summary>获取用于作为父元素的节点。</summary>
        <returns type="Element">元素。</returns>
      </method>
      <method name="setSize" source="2">
        <summary>改变大小。</summary>
        <returns type="Element">this</returns>
        <param name="x" type="Number">坐标。</param>
        <param name="y" type="Number">坐标。</param>
      </method>
      <method name="setOuterSize" source="2">
        <summary>改变大小。</summary>
        <returns type="Element">this</returns>
        <param name="x" type="Number">坐标。</param>
        <param name="y" type="Number">坐标。</param>
      </method>
      <method name="setWidth" source="2">
        <summary>获取元素自身大小（不带滚动条）。</summary>
        <returns type="Element">this</returns>
        <param name="value" type="" />
      </method>
      <method name="setHeight" source="2">
        <summary>获取元素自身大小（不带滚动条）。</summary>
        <returns type="Element">this</returns>
        <param name="value" type="" />
      </method>
      <method name="setScroll" source="2">
        <summary>滚到。</summary>
        <returns type="Element">this</returns>
        <param name="dom" type="Element" />
        <param name="x" type="Number">坐标。</param>
        <param name="y" type="Number">坐标。</param>
      </method>
      <method name="setOffset" source="2">
        <summary>设置元素的相对位置。</summary>
        <returns type="Element">this</returns>
        <param name="p" type="Point" />
      </method>
      <method name="setPosition" source="2">
        <summary>设置元素的固定位置。</summary>
        <returns type="Element">this</returns>
        <param name="x" type="Number">坐标。</param>
        <param name="y" type="Number">坐标。</param>
      </method>
      <method name="getElementsByAttribute" source="2">
        <summary>根据属性获得元素内容。</summary>
        <returns type="Array">节点集合。</returns>
        <param name="name" type="String">属性名。</param>
        <param name="value" type="Object">属性值。</param>
      </method>
      <method name="getElementsByClassName" source="2">
        <summary>根据类名返回子节点。</summary>
        <returns type="Array">节点集合。</returns>
        <param name="classname" type="Strung">类名。</param>
      </method>
      <method name="find" source="2">
        <summary>执行一个简单的选择器。</summary>
        <returns type="Element/undefined">节点。</returns>
        <param name="selecter" type="String">选择器。 如 h2 .cls attr=value 。</param>
      </method>
      <method name="get" source="2">
        <summary>获得相匹配的节点。</summary>
        <returns type="Element">元素。</returns>
        <param name="type" type="String">类型。</param>
        <param name="fn" type="Function/Number">过滤函数或索引或标签。</param>
      </method>
      <method name="contains" source="2">
        <summary>判断一个节点是否有子节点。</summary>
        <returns type="Boolean">有返回true 。</returns>
        <param name="child" type="Element">子节点。</param>
      </method>
      <method name="clone" source="2">
        <summary>复制节点。</summary>
        <returns type="Element">元素。</returns>
        <param name="copyListener" type="Boolean" defaultvalue="false">是否复制事件。</param>
        <param name="contents" type="Boolean" defaultvalue="true">是否复制子元素。</param>
        <param name="keepid" type="Boolean" defaultvalue="false">是否复制 id 。</param>
      </method>
      <method name="insert" source="2">
        <summary>在某个位置插入一个HTML 。</summary>
        <returns type="Element">插入的节点。</returns>
        <param name="html" type="String/Element">内容。</param>
        <param name="swhere" type="String" defaultvalue="">插入地点。 beforeBegin   节点外    beforeEnd   节点里    afterBegin    节点外  afterEnd     节点里</param>
      </method>
      <method name="append" source="2">
        <summary>插入一个HTML 。</summary>
        <returns type="Element">元素。</returns>
        <param name="html" type="String/Element">内容。</param>
        <param name="escape" type="Boolean">是否转义 HTML 代码，这样插入的为文本。</param>
      </method>
      <method name="replaceWith" source="2">
        <summary>将一个节点用另一个节点替换。</summary>
        <returns type="Element">元素。</returns>
        <param name="html" type="String">内容。</param>
      </method>
      <method name="wrapWith" source="2">
        <summary>将一个节点用html包围。</summary>
        <returns type="Element">元素。</returns>
        <param name="html" type="String">内容。</param>
      </method>
      <method name="renderTo" source="2">
        <summary>设置节点的父节点。</summary>
        <returns type="Element">this</returns>
        <param name="elem" type="Element">节点。</param>
      </method>
      <method name="remove" source="2">
        <summary>删除元素子节点或本身。</summary>
        <returns type="Element">this</returns>
        <param name="child" type="Object/undefined">子节点。</param>
      </method>
      <method name="empty" access="private" source="2">
        <summary>删除一个节点的所有子节点。</summary>
        <returns type="Element">this</returns>
        <param name="elem" type="Object">节点。</param>
      </method>
      <method name="dispose" access="private" source="2">
        <summary>释放节点所有资源。</summary>
        <returns type="void" />
        <param name="elem" type="Element">节点。</param>
      </method>
    </class>
    <namespace name="navigator">
      <property propertyaccess="1" type="Boolean" name="isIE">
        <summary>获取一个值，该值指示是否为 IE 浏览器。</summary>
      </property>
      <property propertyaccess="1" type="Boolean" name="isFirefox">
        <summary>获取一个值，该值指示是否为 Firefox 浏览器。</summary>
      </property>
      <property propertyaccess="1" type="Boolean" name="isChrome">
        <summary>获取一个值，该值指示是否为 Chrome 浏览器。</summary>
      </property>
      <property propertyaccess="1" type="Boolean" name="isOpera">
        <summary>获取一个值，该值指示是否为 Opera 浏览器。</summary>
      </property>
      <property propertyaccess="1" type="Boolean" name="isSafari">
        <summary>获取一个值，该值指示是否为 Safari 浏览器。</summary>
      </property>
      <field type="String" name="browser">
        <summary>浏览器信息。</summary>
      </field>
      <field type="String" name="version">
        <summary>浏览器版本。</summary>
      </field>
      <field type="String" name="fullBrowser">
        <summary>浏览器详细信息。</summary>
      </field>
      <field type="Boolean" name="isQuirks">
        <summary>是否为标准浏览器模式。IE6,7不被认为是标准的。</summary>
      </field>
      <field type="Boolean" name="isStd">
        <summary>是否为标准浏览器事件。</summary>
      </field>
    </namespace>
    <class name="XMLHttpRequest">
      <method name="isOk" attribute="static">
        <summary>判断当前请求是否有正常的返回。</summary>
        <returns type="Boolean">正常返回true 。</returns>
        <param name="xmlHttp" type="XMLHttpRequest">请求。</param>
      </method>
    </class>
    <class name="ElementList" source="2">
      <constructor name="constructor" source="2">
        <summary>初始化 ElementList  实例。</summary>
        <returns type="void" />
        <param name="doms" type="Array/ElementList">节点集合。</param>
        <param name="doms" type="Array/ElementList">节点集合。</param>
      </constructor>
      <method name="each" source="2">
        <summary>对集合每个元素执行一次函数。</summary>
        <returns type="Array">结果集。</returns>
        <param name="fn" type="Function">参数。</param>
        <param name="args" type="Array">/... 参数。</param>
      </method>
    </class>
    <class name="Document" source="2">
      <method name="getWindowSize" source="2">
        <summary>获取元素可视区域大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="setWindowSize" source="2">
        <summary>设置元素可视区域大小。</summary>
        <returns type="Document">this 。</returns>
        <param name="x" type="Number">大小。</param>
        <param name="y" type="Number">大小。</param>
      </method>
      <method name="getSize" source="2">
        <summary>获取元素可视区域大小。包括 margin 和 border 大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getScroll" source="2">
        <summary>获取滚动条已滚动的大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="getOffsets" source="2">
        <summary>获取距父元素的偏差。</summary>
        <returns type="Point">位置。</returns>
        <param name="" type="Undefined" />
      </method>
      <method name="getScrollSize" source="2">
        <summary>获取滚动区域大小。</summary>
        <returns type="Point">位置。</returns>
      </method>
      <method name="setScroll" source="2">
        <summary>滚到。</summary>
        <returns type="Document">this 。</returns>
        <param name="x" type="Number">坐标。</param>
        <param name="y" type="Number">坐标。</param>
      </method>
    </class>
  </members>
</doc>