




本文试图通过说明PyJs的优势来说服你尝试使用PyJs，并假设你本来是忠实的 jQuery用户。



PyJs 和 jQuery 的最大差别是它是面向对象的，这意味着它的代码的可读性高(维护方便)、效率高(因为没有测试参数的代码)、自定义功能方便(基于类的继承实现)。
jQuery 追求的是代码短，在小项目中非常适合，但大项目往往出现代码混乱的情况。
PyJs 追求的是代码美，代码质量。

只要你有面向对象的基础知识(特别是 java, asp.net的开发人员都比较熟悉这方面的知识)，就可以很快上手，甚至可以脱离文档在不熟悉的情况下使用此库。

JS实际应用分两类， 一类是界面的简单JS需求， 一类是大型的JS交互程序。

下面这段面向前者： 

PyJs不是理论的堆积，它可以完成 jQuery 所能完成的所有事，并且代码基本相似。

先上个例子： 比如要实现这样一个功能，为 id 为 d 的节点绑定一个click事件 , 并在事件发生时输出这个节点的文本内容，并且下移10px的位置。

jQuery的实现为： 

$("#id").click(function(){

	alert( this.text() );
	
	var p = this.offset();
	p.top += 10;
	
	this.offset(p);
	
});


PyJs 的实现代码为：

$('id').on('click', function(){

	alert( this.getText() );
	
	this.setPosition( this.getPosition().add( 0, -10 )  );

});

如果你研究过其他框架，会发现也都是这个样的，只是命名上有点区别。
这个例子说明了PyJs的基本风格： 使用get/set系列 而不是 一个函数式的， 使用 on (对应jQuery是bind) ，而不是为每个事件生成函数 。
这里体现2个思想： 1. 面向对象的设计要求一个函数只能做一件事，它不应该合并 get/set ，在一个函数里做相反的两个事。 2. 不纯为了减少代码量而牺牲代码可读性。代码可读性的重要性高于代码量， 它不随便使用缩略词。



下面这段面向后者。


大型的JS开发，面向对象更为重要， PyJs在这方面提供有力支持，并且系统本身也是用类组成的，用户可以随便继承扩展。本文不是教程，不多介绍了。



关于公认的问题的回答：

1. 写代码追求的是习惯，我都用 jQuery 好多年了。
                  是的。PyJs是一个UI(界面)和FX(特效)库，它的Core(核心)部分才是和 jQuery类似的一个框架 。欢迎 正在找UI库的朋友尝试。 对于 只需要jQuery的底层功能的用户，你们还是继续用jQuery吧。
我没有打算说服习惯 面向过程 编程的人改变习惯。而如果习惯面向对象的编程，可以尝试下。
                  


2.  PyJs 稳不稳定，成不成熟。
		思想很成熟，实现不稳定。
作为一个已经开发24个月的库来说，它的思想非常成熟，但各种BUG是不能避免的。不管怎样，它目前还是 0.4 版本。
但 PyJs 的源码的注释很多、容易理解，一旦出现错误，你也可以很快修正它。基本功能都是经测试的，不用担心。即使有BUG，你也不会遇到(如果真的遇到了，那是好事， 不是么?)。



3.  jQuery有很多插件。
      这个很无奈。大部分功能PyJs都是自带的,至于其它的.. 以后一起努力把。
      


本文完。如果想了解更多，可以读一下 《PyJs自我介绍》。