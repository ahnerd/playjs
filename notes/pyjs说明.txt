



不得不承认我将是又一个 JS 框架/UI库  创造者 。



总有那么多人在说现在有很多很多成熟的库，但总有那么多人在不断地制造库。
做一个UI库不是一个简单的事，否则现在会有更多的库。
在准备花很多时间做一个UI库之前，必须有一个充分的理由。


很多人的理由是: 我只喜欢用自己写的代码。

如果仅仅因为这个理由而做，那就像为了自己的虚荣心而做----无聊。


在做一个UI库之前，必须找一个充足的理由否定现有的库: 为什么不用这些库而自己写呢。


Ext 是我非常钟爱的库，它面向对象，使用简单。但它有3个充足的理由被我否定:

1. 学习困难， 我曾尝试使用 Ext创建一个类似 <select> 的选择框 ComboBox 。但我始终找不到为这个框增加一个选项的函数，后来才知道， Ext 里有个东西叫数据源，在使用 ComboxBox 之前， 必须先了解数据源! 新人对这个库只能叹气: 要学的东西太多了。
2. 不免费， 这样还怎么敢应用到大项目。
3. 大、慢，如果没有上面2个理由，这样的缺点能容忍，但正因为 Ext 的大，才使它功能强、学习难、速度小。

现在有很多基于 jQuery 的 UI库，国内我比较看好 DWZJS 和 EASYUI ，它们确实做到了一个 UI 应有的界面和风格。
然而我习惯于面向对象的代码，我宁愿不使用它们也不会去写一个面向过程的代码。

很多人还在基于 jQuery 创建新的 UI 库，我认为这完全是徒劳， 首先你做的东西不如已有的完善，其次无论你怎么写，最后的调用方式都已有， 无非就是函数名、配置名换换: 真的没必要再去制作 基于 jQuery 的面向过程的 UI 库了。

至于 其它库，我想它们的UI不是让我很满意、而且功能远不如 Ext 多。


我坚持下来做这个UI库， 当然是冲着上面的几个理由的。因此，它保证:

1. 真正的面向对象的代码。
	如果你不知道面向对象的优势，我可以介绍下:
	
	面向对象的代码理念就是封装和模块化。每个模块分开写。而且它允许你任意扩展和修改其中的模块，而不必改太多代码。 举个例子:
	假如我们要实现一个 Tab 选项卡组件。当选项卡满的时候，会在右上角有个导航菜单，方便切换到任意一个选项卡。
	
	从原理本质上，很简单: 几个 DIV， 用 JS 设置当前显示的那个 DIV。
	
	基于 jQuery 的 UI组件往往使用这样的代码即可:
	
	$('id').tabs();
	
	一切看起来很不错。
	
	但假如，我需要在 TAB 右上角加一个导航菜单，防止 TAB 太多的时候显示不下。而且我不是总需要这个导航菜单的: 对于网页的前台， 选项卡的数目往往固定，不需要这个导航菜单。
	但对于后台， 需要用这个功能。
	
	你肯能认为这不是问题，在不需要导航菜单的时候影藏即可。但实现一个导航菜单不是一个简单的事，它需要大量JS， 我不喜欢在重视流量的前台页面中夹杂无用的代码。
	
	或者你可以说为前台和后台各写一个 TAB 组件。但如果有人让你所有的代码都一次写2份，你愿意么。

	面向对象的代码是这样的问题最好解决方式: 
	
	创建一个实现基本功能的 Tab 类。 在前台使用这个类。
	
	创建一个继承这个 Tab 类的 TabEx类，实现导航菜单功能。 在后台使用这个类。
	

2. 速度高、代码短。

	Ext 把用户想象成不会 HTML 和 CSS 。它为了实现自动化 HTML 和 CSS 牺牲不少代码。
	
	我的目标也是这样，但没有浪费额外代码， 假设用户不知道 HTML 和 CSS， 他们可以使用基本的功能，但如果用户知道 HTML 和 CSS， 他们可以制作更多效果。


3. 模块独立

	不需要的模块可以不载入。需要的模块可以很快载入。
	对于 UI 组件， 即可以用 JS 创建， 也可以从已知的 HTML 创建。





















